(define (power-set set)  (if (null? set)      '(())      (let ((rest (power-set (cdr set))))        (append (map (lambda (element) (cons (car set) element))                     rest)                rest)))) (display (power-set (list 1 2 3)))(newline) (display (power-set (list "A" "C" "E")))(newline),  (define (power_set_iter set)  (let loop ((res '(())) (s set))    (if (empty? s)        res        (loop (append (map (lambda (i) (cons (car s) i)) res) res) (cdr s))))) 