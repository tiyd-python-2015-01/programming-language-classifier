#!/usr/bin/perl use warnings;use strict; my @h = hailstone(27);print "Length of hailstone(27) = " . scalar @h . "\n";print "[" . join(", ", @h[0 .. 3], "...", @h[-4 .. -1]) . "]\n"; my ($max, $n) = (0, 0);for my $x (1 .. 99_999) {    @h = hailstone($x);    if (scalar @h > $max) {        ($max, $n) = (scalar @h, $x);    }} print "Max length $max was found for hailstone($n) for numbers < 100_000\n";  sub hailstone {    my ($n) = @_;     my @sequence = ($n);     while ($n > 1) {        if ($n % 2 == 0) {            $n = int($n / 2);        } else {            $n = $n * 3 + 1;        }         push @sequence, $n;    }     return @sequence;}, #!/usr/bin/perluse strict; sub hailstone {    @_ = local $_ = shift;    push @_, $_ = $_ % 2 ? 3 * $_ + 1 : $_ / 2 while $_ > 1;    @_;} my @h = hailstone($_ = 27);print "$_: @h[0 .. 3] ... @h[-4 .. -1] (".@h.")\n"; @h = ();for (1 .. 99_999) { @h = ($_, $h[2]) if ($h[2] = hailstone($_)) > $h[1] }printf "%d: (%d)\n", @h;, sub _{my$_=$_[''];push@_,$_&1?$_+=$_++<<1:($_>>=1)while$_^1;@_}@_=_($_=031^2);print "$_: @_[0..3] ... @_[-4..-1] (".@_.")\n";$_[1]<($_[2]=_($_))and@_=($_,$_[2])for 1..1e5-1;printf "%d: (%d)\n", @_;