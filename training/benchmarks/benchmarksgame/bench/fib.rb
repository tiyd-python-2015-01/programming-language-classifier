def anynacci(start_sequence, count)  n = start_sequence.length    # Get the n-step for the type of fibonacci sequence  result = start_sequence.dup  # Create a new result array with the values copied from the array that was passed by reference   (n+1..count).each do         # Loop for the remaining results up to count    result << result.last(n).reduce(:+)    # Get the last n element from result and append its total to Array  end   result                       # Return resultend naccis = { lucus:      [2,1],           fibonacci:  [1,1],           tribonacci: [1,1,2],           tetranacci: [1,1,2,4],           pentanacci: [1,1,2,4,8],           hexanacci:  [1,1,2,4,8,16],           heptanacci: [1,1,2,4,8,16,32],           octonacci:  [1,1,2,4,8,16,32,64],           nonanacci:  [1,1,2,4,8,16,32,64,128],           decanacci:  [1,1,2,4,8,16,32,64,128,256] } def print_nacci(naccis, count=15)  puts naccis.map {|name, seq| "%12s : %p" % [name, anynacci(seq, count)]}end print_nacci(naccis),        lucus : [2, 1, 3, 4, 7, 11, 18, 29, 47, 76, 123, 199, 322, 521, 843]   fibonacci : [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]  tribonacci : [1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136]  tetranacci : [1, 1, 2, 4, 8, 15, 29, 56, 108, 208, 401, 773, 1490, 2872, 5536]  pentanacci : [1, 1, 2, 4, 8, 16, 31, 61, 120, 236, 464, 912, 1793, 3525, 6930]   hexanacci : [1, 1, 2, 4, 8, 16, 32, 63, 125, 248, 492, 976, 1936, 3840, 7617]  heptanacci : [1, 1, 2, 4, 8, 16, 32, 64, 127, 253, 504, 1004, 2000, 3984, 7936]   octonacci : [1, 1, 2, 4, 8, 16, 32, 64, 128, 255, 509, 1016, 2028, 4048, 8080]   nonanacci : [1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 511, 1021, 2040, 4076, 8144]   decanacci : [1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1023, 2045, 4088, 8172] 